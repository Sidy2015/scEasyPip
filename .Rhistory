documents()
devtools::document()
devtools::document()
library(scEasyPip)
?read_10Xdata
library(scEasyPip)
?read_10Xdata
devtools::document()
library(scEasyPip)
?read_10Xdata
getwd()
devtools::install_github('Theob0t/scEasyPip')
library(scEasyPip)
hello()
?hello
hello()
hello
scEasyPip::hello()
read_10Xdata()
scEasyPip::read_10Xdata()
devtools::install_github('Theob0t/scEasyPip')
DimPlot()
devtools::install_github('Theob0t/scEasyPip')
sessionInfo()
seurat_pipeline <- function(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject', max.percent.mt = 15, max.features = 35000, max.nCount = 50000, sctransform = TRUE, vars.to.regress = c('percent.mt','nCount_RNA'), ndims = 50, dims=1:35, resolution = seq(0.1,1,0.1), cellcycle = TRUE, genes.FeaturePlot = NULL, genes.DotPlot = NULL, find.all.markers = TRUE, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = 'MAST'){
options(warn=-1)
obj <- read_10Xdata(data.dir=data.dir, min.cells = min.cells, min.features = min.features, mt.pattern = mt.pattern, project.name = project.name)
obj <- subset(obj, subset = nFeature_RNA > min.features & nFeature_RNA < max.features & percent.mt < max.percent.mt & nCount_RNA < max.nCount)
print(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
#NORMALIZATION
if (sctransform){
obj <- SCTransform(obj, vars.to.regress = vars.to.regress, verbose = F)
}
#CLUSTERING
obj <- RunPCA(obj, verbose = FALSE)
print(ElbowPlot(obj, ndims = ndims))
obj <- FindNeighbors(obj, dims = dims, verbose = FALSE)
obj <- FindClusters(obj, resolution = resolution, verbose=FALSE)
obj <- RunUMAP(obj, dims = dims, umap.method = "umap-learn")
obj <- FindClusters(obj, resolution = 0.3, verbose=FALSE)
if (sctransform){print(clustree(obj, prefix='SCT_snn_res.'))}
print(clustree_overlay(obj, red_dim = "umap", x_value = "umap1", y_value = "umap2"))
print(DimPlot(obj, reduction='umap', label=TRUE))
print(DimPlot(obj, reduction='umap', group.by = 'orig.ident'))
if (cellcycle){
s.genes <- str_to_title(tolower(cc.genes$s.genes))
g2m.genes <- str_to_title(tolower(cc.genes$g2m.genes))
obj <- CellCycleScoring(obj, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)
print(DimPlot(obj, reduction='umap', label=TRUE))
}
if (!is.null(genes.FeaturePlot)){
print(FeaturePlot(obj, features = genes.FeaturePlot))
}
if (!is.null(genes.DotPlot)){
print(DotPlot(obj, features = genes.DotPlot))
}
if(find.all.markers){
obj_markers <- FindAllMarkers(obj, only.pos = only.pos, min.pct = min.pct, logfc.threshold = logfc.threshold, test.use = test.use)
write.csv(obj_markers, 'markers_obj.csv')
}
return(obj)
}
obj <- if(interactive())seurat_pipeline(genes.FeaturePlot=c('Lgr5','Dmbt1'),genes.DotPlot=c('Lgr5','Dmbt1'))
library(dplyr)
library(Seurat)
library(patchwork)
library(EnhancedVolcano)
library(Seurat)
library(SeuratData)
library(SeuratDisk)
library(Nebulosa)
library(clustree)
library(dorothea)
library(tibble)
library(tidyr)
library(viper)
library(AUCell)
#library(clusterProfiler)
library(ggplot2)
library(msigdbr)
library(ComplexHeatmap)
library(stringr)
read_10Xdata <- function(data.dir, min.cells, min.features, mt.pattern, project.name){
obj.data <- Read10X(data.dir = data.dir)
obj <- CreateSeuratObject(counts = obj.data, project = project.name, min.cells = min.cells, min.features = min.features)
obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = mt.pattern[2])
print(FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt"))
print(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
return(obj)
}
read_10Xdata(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject')
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")
obj <- read_10Xdata(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject')
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")
savePlot('test', type='png')
if (NULL %in% c(max.features, max.nCount)){print('NULL')}
max.features=NULL
max.nCount=NULL
if (NULL %in% c(max.features, max.nCount)){print('NULL')}
if (is.null(c(max.features,max.nCount)){print('T')}
obj <-
subset(
obj,
subset = nFeature_RNA > min.features &
nFeature_RNA < max.features &
percent.mt < max.percent.mt & nCount_RNA < max.nCount
)
save_plot('outs/QC_filtering',Seurat::FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
#NORMALIZATION
if (sctransform) {
print('Normalization: SCTransform ...')
obj <-
Seurat::SCTransform(obj, vars.to.regress = vars.to.regress, verbose = F)
}
else {
print('Normalization: LogNomalization ...')
obj <- Seurat::NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000, verbose=F)
obj <- Seurat::FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000, verbose=F)
obj <- Seurat::ScaleData(obj, features = rownames(obj),verbose=F)
}
print(obj)
#CLUSTERING
print('Dimensional Reduction')
obj <- Seurat::RunPCA(obj, verbose = FALSE)
save_plot('outs/ElbowPlot',Seurat::ElbowPlot(obj, ndims = ndims))
print('Clustering')
obj <- Seurat::FindNeighbors(obj, dims = dims, verbose = FALSE)
obj <- Seurat::FindClusters(obj, resolution = resolution, verbose = FALSE)
print('Running UMAP ...')
obj <- Seurat::RunUMAP(obj, dims = dims, umap.method = "umap-learn")
#obj <- Seurat::FindClusters(obj, resolution = 0.3, verbose = FALSE)
if (sctransform) {
save_plot('outs/clustree',clustree(obj, prefix = 'SCT_snn_res.'))
}
save_plot('outs/clustree_overlay',clustree_overlay(
obj,
red_dim = "umap",
x_value = "umap1",
y_value = "umap2"
))
save_plot('outs/DimPlot_umap',Seurat::DimPlot(obj, reduction = 'umap', label = TRUE))
save_plot('outs/Dimplot_umap_orig.ident',Seurat::DimPlot(obj, reduction = 'umap', group.by = 'orig.ident'))
if (cellcycle) {
print('Cell Cycling Scoring')
s.genes <- str_to_title(tolower(cc.genes$s.genes))
g2m.genes <- str_to_title(tolower(cc.genes$g2m.genes))
obj <-
Seurat::CellCycleScoring(
obj,
s.features = s.genes,
g2m.features = g2m.genes,
set.ident = FALSE
)
save_plot('outs/cellcycle',Seurat::DimPlot(obj, reduction = 'umap', label = TRUE))
}
if (!is.null(genes.FeaturePlot)) {
save_plot('outs/FeaturePlot',Seurat::FeaturePlot(obj, features = genes.FeaturePlot))
}
if (!is.null(genes.DotPlot)) {
save_plot('outs/DotPlot',Seurat::DotPlot(obj, features = genes.DotPlot))
}
if (find.all.markers) {
print('Finding Markers')
obj_markers <-
Seurat::FindAllMarkers(
obj,
only.pos = only.pos,
min.pct = min.pct,
logfc.threshold = logfc.threshold,
test.use = test.use
)
write.csv(obj_markers, 'markers_obj.csv')
}
return(obj)
}
#' Save output plot in png format
#'
#' @param filename The filename under which to save the plot
#' @param plot The plot to save
#'
#' @return  The plot saved as a png image
#'
#' @export
save_plot <-function(filename,plot){
png(filename = paste0(filename,".png"), width = 720, height = 576)
plot
dev.off()
}
if (is.null(c(max.features,max.nCount))){print('T')}
if (is.null(c(max.features,max.nCount))){print('T')}
max.features=2
max.nCount=NULL
if (is.null(c(max.features,max.nCount))){print('T')}
if (is.null(max.features)){print('T')}
if (is.null(max.nCount)){print('T')}
setwd("C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package")
read_10Xdata <- function(data.dir, min.cells, min.features, mt.pattern, project.name){
obj.data <- Read10X(data.dir = data.dir)
obj <- CreateSeuratObject(counts = obj.data, project = project.name, min.cells = min.cells, min.features = min.features)
obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = mt.pattern[2])
print(FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt"))
print(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
return(obj)
}
obj <- read_10Xdata(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject')
read_10Xdata <- function(data.dir, min.cells, min.features, mt.pattern, project.name){
obj.data <- Read10X(data.dir = data.dir)
obj <- CreateSeuratObject(counts = obj.data, project = project.name, min.cells = min.cells, min.features = min.features)
obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = mt.pattern[2])
print(FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt"))
print(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
return(obj)
}
library(Seurat)
obj <- read_10Xdata(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject')
mean(obj$nCount_RNA)
max(obj$nCount_RNA)
quantile(obj$nCount_RNA, 0.975)
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "nCount_RNA")
obj <- read_10Xdata(data.dir=getwd(), min.cells = 3, min.features = 200, mt.pattern = c('^MT-','^mt-'), project.name='SeuratProject')
max(obj$nCount_RNA)
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "nCount_RNA")
quantile(obj$nCount_RNA, 0.975)
max(quantile(obj$nCount_RNA, 0.975))
>quantile()
quantile()
?quantile()
FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "nCount_RNA")
quantile(obj$nCount_RNA, 0.97)
quantile(obj$nCount_RNA, 0.97)[1]
quantile(obj$nCount_RNA, 0.97,names = F)
library(scEasyPip)
run_pipeline('.')
run_pipeline('.')
library(scEasyPip)
run_pipeline('.')
paste0(NULL,'test')
library(scEasyPip)
run_pipeline(data.dir = '.', output.dir = 'scEasyPip/scEasyPip/outs/')
run_pipeline(data.dir = '.', output.dir = 'scEasyPip/scEasyPip/outs')
setwd("C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/scEasyPip/scEasyPip")
run_pipeline(data.dir = '../../.')
library(scEasyPip)
run_pipeline(data.dir = '../../.')
library(scEasyPip)
run_pipeline(data.dir = '../../.')
run_pipeline(data.dir = '../../.', output.dir='outs/')
library(scEasyPip)
run_pipeline(data.dir = '../../.', output.dir='outs/')
document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
use_mit_license()
usethis::use_mit_license()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(scEasyPip)
devtools::document()
setwd("C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/scEasyPip/scEasyPip")
devtools::document()
rm(list = c("read_10Xdata", "save_plot"))
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::check()
run_pipeline(data.dir = '../../.', output.dir = '../../outs/')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = '../../outs/')
run_pipeline(data.dir = '../../.', output.dir = getwd(../../outs/))
getwd(../../outs/)
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::document()
devtools::check()
library(scEasyPip)
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
obj
Seurat::FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt"))
Seurat::FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")
Seurat::FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")+geom_hline(max.percent.mt)
max.percent.mt = 15
Seurat::FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")+geom_hline(max.percent.mt)
Seurat::FeatureScatter(obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")+geom_hline(yintercept = max.percent.mt, linetype='dashed')
Seurat::FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")+geom_hline(yintercept = max.percent.mt, linetype='dashed')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::document()
devtools::check()
devtools::document()
BiocManager::install("MAST")
devtools::document()
devtools::check()
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
round(max.features)
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::document()
library(scEasyPip)
devtools::load_all(".")
library(scEasyPip)
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
getwd()
obj<- run_pipeline(data.dir = '../../.')
devtools::load_all(".")
gc()
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::load_all(".")
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
devtools::load_all(".")
devtools::document()
devtools::check()
devtools::load_all(".")
library(scEasyPip)
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
View(obj)
devtools::load_all(".")
obj<- run_pipeline(data.dir = '../../.', output.dir = 'C:/Users/tb2928.admin.BB08MPUL87-SC/OneDrive - cumc.columbia.edu/Desktop/scRNA_seq_SEURAT/scRNA_package/outs')
?run_pipeline
?run_10xdata
